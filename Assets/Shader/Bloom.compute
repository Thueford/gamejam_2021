// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSExtractBright
#pragma kernel CSWriteBack

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Source;
RWTexture2D<float4> BrightSpots;

static const int numThreads = 24;

uniform float threshold;

[numthreads(numThreads, numThreads, 1)]
void CSExtractBright (uint3 id : SV_DispatchThreadID)
{
    // write only pixels with a brightness above threshold to BrightSpots
    if (dot(float3(0.2126, 0.7152, 0.0722), Source[id.xy].rgb) > threshold)
    {
        BrightSpots[id.xy] = Source[id.xy];
    }
    else
    {
        BrightSpots[id.xy] = float4(0, 0, 0, 1);
    }
}

[numthreads(numThreads, numThreads, 1)]
void CSWriteBack(uint3 id : SV_DispatchThreadID)
{
    float3 color = Source[id.xy].rgb;
    color += BrightSpots[id.xy].rgb; // additive blending
    Source[id.xy] = float4(color, 1.0);
}
