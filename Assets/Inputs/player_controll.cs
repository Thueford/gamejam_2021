//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/player_controll.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_controll : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_controll()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_controll"",
    ""maps"": [
        {
            ""name"": ""PlayerControll"",
            ""id"": ""1c643363-7dab-43cb-9271-3ba0585fd9d7"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b0bbe9c5-142f-45de-9c2c-f257c2f51472"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4f53584e-c6d7-4812-b535-f2beb14713a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Button"",
                    ""id"": ""9bd0fc92-94c3-45a2-ba7c-b952425a29c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Respawn"",
                    ""type"": ""Button"",
                    ""id"": ""bd33be42-85ca-429c-a02b-91d17bbcc735"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ca238e4-0afa-4054-8ca3-e2de2eeb6001"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d13e16e4-9a8e-4dce-8a4a-31f4388cadd9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""29eb17d7-7066-4b31-a394-63f2dc19b3ee"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d768c844-1bba-453f-ac48-669814ced6c8"",
                    ""path"": ""<Keyboard>/#(Ã–)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e9768253-5614-43b5-b869-571d5eae62f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3e47c6b2-114c-40ce-8541-f9967827f930"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""11533256-3759-4319-b7ad-eeaf2d656cf1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControll"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""116bef00-c318-43c0-bbde-86194b692466"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff2d3a6b-e179-4112-bbd4-605cf9b2ebd0"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControll"",
            ""bindingGroup"": ""PlayerControll"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerControll
        m_PlayerControll = asset.FindActionMap("PlayerControll", throwIfNotFound: true);
        m_PlayerControll_Jump = m_PlayerControll.FindAction("Jump", throwIfNotFound: true);
        m_PlayerControll_Move = m_PlayerControll.FindAction("Move", throwIfNotFound: true);
        m_PlayerControll_CameraZoom = m_PlayerControll.FindAction("CameraZoom", throwIfNotFound: true);
        m_PlayerControll_Respawn = m_PlayerControll.FindAction("Respawn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControll
    private readonly InputActionMap m_PlayerControll;
    private IPlayerControllActions m_PlayerControllActionsCallbackInterface;
    private readonly InputAction m_PlayerControll_Jump;
    private readonly InputAction m_PlayerControll_Move;
    private readonly InputAction m_PlayerControll_CameraZoom;
    private readonly InputAction m_PlayerControll_Respawn;
    public struct PlayerControllActions
    {
        private @Player_controll m_Wrapper;
        public PlayerControllActions(@Player_controll wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerControll_Jump;
        public InputAction @Move => m_Wrapper.m_PlayerControll_Move;
        public InputAction @CameraZoom => m_Wrapper.m_PlayerControll_CameraZoom;
        public InputAction @Respawn => m_Wrapper.m_PlayerControll_Respawn;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllActions instance)
        {
            if (m_Wrapper.m_PlayerControllActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnMove;
                @CameraZoom.started -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.performed -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnCameraZoom;
                @CameraZoom.canceled -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnCameraZoom;
                @Respawn.started -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnRespawn;
                @Respawn.performed -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnRespawn;
                @Respawn.canceled -= m_Wrapper.m_PlayerControllActionsCallbackInterface.OnRespawn;
            }
            m_Wrapper.m_PlayerControllActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @CameraZoom.started += instance.OnCameraZoom;
                @CameraZoom.performed += instance.OnCameraZoom;
                @CameraZoom.canceled += instance.OnCameraZoom;
                @Respawn.started += instance.OnRespawn;
                @Respawn.performed += instance.OnRespawn;
                @Respawn.canceled += instance.OnRespawn;
            }
        }
    }
    public PlayerControllActions @PlayerControll => new PlayerControllActions(this);
    private int m_PlayerControllSchemeIndex = -1;
    public InputControlScheme PlayerControllScheme
    {
        get
        {
            if (m_PlayerControllSchemeIndex == -1) m_PlayerControllSchemeIndex = asset.FindControlSchemeIndex("PlayerControll");
            return asset.controlSchemes[m_PlayerControllSchemeIndex];
        }
    }
    public interface IPlayerControllActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnRespawn(InputAction.CallbackContext context);
    }
}
